"""
Django settings for tracnblog project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Base URL for templates and JavaScript
BASE_URL = ''

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ze7x**p61ovt@4@wh$6r#-(6u(y*+94@@n&odr_n@$o2#)!563'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'cyclingeast.vista-grande.net']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
# Also make sure STATICFILES_DIRS is defined if you have any static files outside apps
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'

# CSRF settings for custom domain
CSRF_TRUSTED_ORIGINS = [
    'https://cyclingeast.vista-grande.net',
    'http://cyclingeast.vista-grande.net',  # Include this if you also accept HTTP
    # Add your production domain here if different
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'tracker.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'tracker.views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'tracker.apps.TrackerConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tracnblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',  # This is important for static files
                # Add custom context processors
                'tracnblog.context_processors.base_url_processor',
                'tracnblog.context_processors.active_journey_processor',  # New processor
            ],
        },
    },
]

# WSGI_APPLICATION = 'tracnblog.wsgi.application'

TIME_ZONE = 'America/Los_Angeles'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Comment moderation settings
AUTO_MODERATE_COMMENTS = False  # Set to True to require approval for all comments

COMMENT_MODERATION_KEYWORDS = [
    'viagra', 'cialis', 'casino', 'pharmacy', 'loan', 'free money',
    'weight loss', 'xxx', 'porn', 'href=', 'http://', 'https://'
]

# Comment rate limiting
COMMENT_RATE_LIMIT_TIME = 300  # 5 minutes
COMMENT_RATE_LIMIT_COUNT = 3   # Max 3 comments per 5 minutes

# Blocked IP addresses for comments
COMMENT_BLOCKED_IPS = [
    # Add IPs here to block them
    # '192.168.1.1',
]

# Spam commenter names
COMMENT_SPAM_NAMES = [
    # Add known spam names here
    # 'spammer123',
]

# Add the rate limiting middleware
MIDDLEWARE += [
    'blog.middleware.CommentRateLimitMiddleware',
]

# Make sure django messages framework is enabled
if 'django.contrib.messages' not in INSTALLED_APPS:
    INSTALLED_APPS.append('django.contrib.messages')

if 'django.contrib.messages.middleware.MessageMiddleware' not in MIDDLEWARE:
    # Find the index of SessionMiddleware
    session_middleware_index = MIDDLEWARE.index('django.contrib.sessions.middleware.SessionMiddleware')
    # Insert MessageMiddleware after SessionMiddleware
    MIDDLEWARE.insert(session_middleware_index + 1, 'django.contrib.messages.middleware.MessageMiddleware')

# Configure message storage
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'